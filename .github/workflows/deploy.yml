name: Deploy Frontend and Backend to EC2

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 0. GitHub 레포 코드를 현재 디렉토리로 체크아웃
      - name: Checkout Frontend Repo
        uses: actions/checkout@v3
        with:
          path: .

      # 1. Node.js 20 버전 설정
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # 2. 프론트엔드 의존성 설치 및 빌드
      - name: Install Dependencies
        run: npm install

      - name: Build Frontend
        run: CI=false npm run build

      # 3. (먼저) EC2의 이전 빌드 디렉토리 삭제
      - name: Clean old frontend build on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            echo "--- Cleaning old frontend build directory on EC2 ---"
            rm -rf ~/ShopSphere-Frontend/build

      # 4. 빌드된 build 폴더를 EC2에 업로드
      - name: Upload build folder to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: "build/*"
          target: "~/ShopSphere-Frontend/build"

      # 5. SSH로 접속해 정적 파일 반영 + 백엔드 빌드 + Docker 컨테이너 재시작
      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            echo "--- Copying Frontend build to Backend static directory ---"
            rm -rf ~/ShopSphere-Backend/src/main/resources/static/*
            cp -r ~/ShopSphere-Frontend/build/* ~/ShopSphere-Backend/src/main/resources/static/

            echo "--- Building Backend JAR ---"
            cd ~/ShopSphere-Backend
            sudo chmod 777 gradlew
            ./gradlew bootJar -x test

            CONTAINER_NAME="shopsphere-backend-app"

            echo "--- Stopping existing Docker container (if exists) ---"
            if [ "$(sudo docker ps -q -f name=^/${CONTAINER_NAME}$)" ]; then
              sudo docker stop ${CONTAINER_NAME}
            fi
            if [ "$(sudo docker ps -aq -f name=^/${CONTAINER_NAME}$)" ]; then
              sudo docker rm ${CONTAINER_NAME}
            fi

            echo "--- Checking for zombie container on port 8080 ---"
            ZOMBIE_CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080")
            if [ -n "$ZOMBIE_CONTAINER_ID" ]; then
              echo "Stopping zombie container: ${ZOMBIE_CONTAINER_ID}"
              sudo docker stop $ZOMBIE_CONTAINER_ID
              sudo docker rm $ZOMBIE_CONTAINER_ID
            fi

            echo "--- Building new Docker image ---"
            sudo docker build --no-cache -t shopsphere-backend .

            echo "--- Running new container ---"
            sudo docker run -d -p 8080:8080 --name ${CONTAINER_NAME} shopsphere-backend
