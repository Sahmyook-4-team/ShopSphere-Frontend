name: Build Frontend & Backend, then Deploy to EC2

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Frontend Repository
        uses: actions/checkout@v3
        with:
          path: frontend

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm install

      - name: Build Frontend
        working-directory: frontend
        run: CI=false npm run build

      - name: Checkout Backend Repository
        uses: actions/checkout@v3
        with:
          repository: Sahmyook-4-team/ShopSphere-Backend
          token: ${{ secrets.GH_TOKEN }}
          path: backend

      ##########################################################
      # 3. 프론트엔드 빌드 결과물을 백엔드 프로젝트에 통합
      # 빌드된 정적 파일들을 백엔드 static 폴더로 복사합니다.
      ############################################################
      - name: Copy Frontend build to Backend static folder
        run: |
          echo "--- Cleaning up backend static folder ---"
          rm -rf backend/src/main/resources/static/*
          echo "--- Copying frontend build files ---"
          cp -r frontend/build/* backend/src/main/resources/static/
          echo "--- Files copied successfully ---"
          ls -l backend/src/main/resources/static/

      ############################################################
      # 4. 백엔드 빌드 (JAR 파일 생성)
      # 프론트엔드 파일을 품은 백엔드 프로젝트를 하나의 JAR 파일로 만듭니다.
      ############################################################
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Make gradlew executable
        working-directory: backend
        run: chmod +x ./gradlew

      - name: Build Backend with Gradle
        working-directory: backend
        # 여기서 생성되는 JAR 파일 이름을 'app.jar'로 고정하는 것이 가장 좋습니다.
        # 백엔드 프로젝트의 build.gradle에 'bootJar { archiveFileName = 'app.jar' }' 설정을 추가해주세요.
        run: ./gradlew bootJar -x test

      ############################################################
      # 5. 최종 JAR 파일을 예측 가능한 위치로 이동 (우리가 배운 핵심 기법)
      # 전송을 위해 복잡한 경로에 있는 JAR 파일을 작업 공간 루트로 옮깁니다.
      ############################################################
      - name: Move final JAR to root for easy upload
        run: mv backend/build/libs/*.jar app.jar
        # build.gradle에서 파일명을 고정했다면 'mv backend/build/libs/app.jar app.jar'로 사용 가능
        
      - name: Check if app.jar exists
        run: |
          ls -l
          if [ -f "app.jar" ]; then
            echo "app.jar found successfully."
          else
            echo "Error: app.jar not found!"
            exit 1
          fi

      - name: Create directory on EC2 for deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: mkdir -p ~/ShopSphere-Backend

      #####################################################################
      # 7. 최종 JAR 파일을 EC2로 전송
      # 이제 대상 디렉터리가 확실히 존재하므로 scp가 성공합니다.
      #####################################################################
      - name: Upload final JAR to EC2
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: app.jar
          target: /home/ubuntu/ShopSphere-Backend/ # 이제 이 디렉토리는 존재가 보장됩니다.
          debug: true # 디버깅을 위해 유지하거나, 성공 후 false로 변경



      ############################################################
      # 7. EC2에 접속하여 Docker로 배포 실행
      # EC2에서는 전송받은 JAR로 새 Docker 이미지를 빌드하고 컨테이너를 실행합니다.
      ############################################################
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            echo "--- Navigating to deployment directory ---"
            cd ~/ShopSphere-Backend

            CONTAINER_NAME="shopsphere-backend-app"

            echo "--- Stopping and removing existing container (if any) ---"
            # 실행 중이거나 종료된 상태의 컨테이너를 모두 찾아 강제로 삭제 (가장 확실한 방법)
            if [ "$(sudo docker ps -aq -f name=^/${CONTAINER_NAME}$)" ]; then
              sudo docker rm -f ${CONTAINER_NAME}
            fi
            
            # (선택적 안전장치) 포트 충돌 방지를 위한 좀비 컨테이너 정리
            ZOMBIE_CONTAINER_ID=$(sudo docker ps -aq --filter "publish=8080")
            if [ -n "$ZOMBIE_CONTAINER_ID" ]; then
                echo "--- Removing zombie container on port 8080 ---"
                sudo docker rm -f $ZOMBIE_CONTAINER_ID
            fi

            echo "--- Building new Docker image ---"
            # EC2의 ~/ShopSphere-Backend 폴더에는 app.jar와 Dockerfile이 있어야 합니다.
            sudo docker build --no-cache -t shopsphere-backend .
            
            echo "--- Running new Docker container ---"
            sudo docker run -d -p 8080:8080 --name ${CONTAINER_NAME} shopsphere-backend
            
            echo "--- Deployment finished ---"
